// Generated by Dagger (https://dagger.dev).
package com.android.example.myapplication.di;

import com.android.example.myapplication.data.source.VitalDataSource;
import com.android.example.myapplication.network.VitalService;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideVitalRemoteDataSourceFactory implements Factory<VitalDataSource> {
  private final Provider<VitalService> vitalServiceProvider;

  public AppModule_ProvideVitalRemoteDataSourceFactory(
      Provider<VitalService> vitalServiceProvider) {
    this.vitalServiceProvider = vitalServiceProvider;
  }

  @Override
  public VitalDataSource get() {
    return provideVitalRemoteDataSource(vitalServiceProvider.get());
  }

  public static AppModule_ProvideVitalRemoteDataSourceFactory create(
      Provider<VitalService> vitalServiceProvider) {
    return new AppModule_ProvideVitalRemoteDataSourceFactory(vitalServiceProvider);
  }

  public static VitalDataSource provideVitalRemoteDataSource(VitalService vitalService) {
    return Preconditions.checkNotNull(AppModule.INSTANCE.provideVitalRemoteDataSource(vitalService), "Cannot return null from a non-@Nullable @Provides method");
  }
}

// Generated by Dagger (https://dagger.dev).
package com.android.example.myapplication.di;

import android.content.Context;
import androidx.lifecycle.ViewModel;
import com.android.example.myapplication.data.source.VitalDataSource;
import com.android.example.myapplication.network.VitalService;
import com.android.example.myapplication.repository.DefaultVitalRepository;
import com.android.example.myapplication.repository.DefaultVitalRepository_Factory;
import com.android.example.myapplication.repository.VitalRepository;
import com.android.example.myapplication.vital.VitalListFragment;
import com.android.example.myapplication.vital.VitalListFragment_MembersInjector;
import com.android.example.myapplication.vital.VitalListViewModel;
import com.android.example.myapplication.vital.VitalListViewModel_Factory;
import com.android.example.myapplication.vital.di.VitalComponent;
import com.squareup.moshi.Moshi;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<Moshi> provideMoshiProvider;

  private Provider<OkHttpClient> getOkHttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<VitalService> provideAlbumServiceProvider;

  private Provider<VitalDataSource> provideVitalRemoteDataSourceProvider;

  private Provider<CoroutineDispatcher> provideIoDispatcherProvider;

  private Provider<DefaultVitalRepository> defaultVitalRepositoryProvider;

  private Provider<VitalRepository> bindAlbumRepositoryProvider;

  private DaggerAppComponent(Context applicationContext) {

    initialize(applicationContext);
  }

  public static AppComponent.Factory factory() {
    return new Factory();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Context applicationContext) {
    this.provideMoshiProvider = DoubleCheck.provider(AppModule_ProvideMoshiFactory.create());
    this.getOkHttpClientProvider = DoubleCheck.provider(AppModule_GetOkHttpClientFactory.create());
    this.provideRetrofitProvider = DoubleCheck.provider(AppModule_ProvideRetrofitFactory.create(provideMoshiProvider, getOkHttpClientProvider));
    this.provideAlbumServiceProvider = DoubleCheck.provider(AppModule_ProvideAlbumServiceFactory.create(provideRetrofitProvider));
    this.provideVitalRemoteDataSourceProvider = DoubleCheck.provider(AppModule_ProvideVitalRemoteDataSourceFactory.create(provideAlbumServiceProvider));
    this.provideIoDispatcherProvider = DoubleCheck.provider(AppModule_ProvideIoDispatcherFactory.create());
    this.defaultVitalRepositoryProvider = DefaultVitalRepository_Factory.create(provideVitalRemoteDataSourceProvider, provideIoDispatcherProvider);
    this.bindAlbumRepositoryProvider = DoubleCheck.provider((Provider) defaultVitalRepositoryProvider);
  }

  @Override
  public VitalComponent.Factory vitalComponent() {
    return new VitalComponentFactory();}

  private static final class Factory implements AppComponent.Factory {
    @Override
    public AppComponent create(Context applicationContext) {
      Preconditions.checkNotNull(applicationContext);
      return new DaggerAppComponent(applicationContext);
    }
  }

  private final class VitalComponentFactory implements VitalComponent.Factory {
    @Override
    public VitalComponent create() {
      return new VitalComponentImpl();
    }
  }

  private final class VitalComponentImpl implements VitalComponent {
    private Provider<VitalListViewModel> vitalListViewModelProvider;

    private VitalComponentImpl() {

      initialize();
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(VitalListViewModel.class, (Provider) vitalListViewModelProvider);}

    private TodoViewModelFactory getTodoViewModelFactory() {
      return new TodoViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.vitalListViewModelProvider = VitalListViewModel_Factory.create(DaggerAppComponent.this.bindAlbumRepositoryProvider);
    }

    @Override
    public void inject(VitalListFragment fragment) {
      injectVitalListFragment(fragment);}

    private VitalListFragment injectVitalListFragment(VitalListFragment instance) {
      VitalListFragment_MembersInjector.injectViewModelFactory(instance, getTodoViewModelFactory());
      return instance;
    }
  }
}

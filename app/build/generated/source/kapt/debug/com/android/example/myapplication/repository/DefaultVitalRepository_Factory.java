// Generated by Dagger (https://dagger.dev).
package com.android.example.myapplication.repository;

import com.android.example.myapplication.data.source.VitalDataSource;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DefaultVitalRepository_Factory implements Factory<DefaultVitalRepository> {
  private final Provider<VitalDataSource> albumsRemoteDataSourceProvider;

  private final Provider<CoroutineDispatcher> ioDispatcherProvider;

  public DefaultVitalRepository_Factory(Provider<VitalDataSource> albumsRemoteDataSourceProvider,
      Provider<CoroutineDispatcher> ioDispatcherProvider) {
    this.albumsRemoteDataSourceProvider = albumsRemoteDataSourceProvider;
    this.ioDispatcherProvider = ioDispatcherProvider;
  }

  @Override
  public DefaultVitalRepository get() {
    return newInstance(albumsRemoteDataSourceProvider.get(), ioDispatcherProvider.get());
  }

  public static DefaultVitalRepository_Factory create(
      Provider<VitalDataSource> albumsRemoteDataSourceProvider,
      Provider<CoroutineDispatcher> ioDispatcherProvider) {
    return new DefaultVitalRepository_Factory(albumsRemoteDataSourceProvider, ioDispatcherProvider);
  }

  public static DefaultVitalRepository newInstance(VitalDataSource albumsRemoteDataSource,
      CoroutineDispatcher ioDispatcher) {
    return new DefaultVitalRepository(albumsRemoteDataSource, ioDispatcher);
  }
}
